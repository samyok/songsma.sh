{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["sleep","n","Promise","r","setTimeout","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","stats","Stats","showPanel","App","Cam","Cvs","useState","debug","setDebug","model","setModel","pose","setPose","localStorage","getItem","deviceId","setDeviceId","devices","setDevices","wcData","setWCData","blueSaber","setBlueSaber","window","addEventListener","ev","location","reload","a","video","readyState","estimateSinglePose","getContext","flipHorizontal","ps","ctx","fillStyle","clearRect","canvas","width","height","keypoints","filter","kp","score","part","includes","forEach","fillRect","position","x","y","pv","kpObj","leftWrist","leftElbow","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","scene","rotation","z","Math","PI","scale","set","min","w","distance","sqrt","angle","asin","rightWrist","rightElbow","handleDevices","useCallback","mediaDevices","kind","onWCMedia","mediaStream","console","log","active","v","videoWidth","h","videoHeight","posenetSetup","then","posenet","architecture","outputStride","inputResolution","quantBytes","multiplier","net","navigator","enumerateDevices","cubes","setCubes","renderer","setRenderer","setScene","camera","setCamera","THREE","background","innerWidth","innerHeight","alpha","loader","GLTFLoader","genCube","lineIndex","lineLayer","type","cutDirection","postProcessingCube","gltf","add","load","setSize","outputEncoding","document","body","appendChild","domElement","playingFieldGeo","fieldColor","color","side","opacity","transparent","playingField","rotateX","lights","i","length","fog","dom","file","rotX","rotY","rotZ","genSaber","round","remove","splice","breakCube","begin","render","end","value","onChange","event","currentTarget","setItem","map","device","key","label","style","minHeight","ref","audio","mirrored","videoConstraints","ideal","onUserMedia","top","left","JSON","stringify","bottom","backgroundColor","fontSize","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6cfd71ad.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const sleep = n => new Promise(r => setTimeout(r, n));\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Webcam from \"react-webcam\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport { sleep, useInterval } from \"./utils\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport * as Stats from \"stats.js\";\n\nconst stats = new Stats();\nstats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\nfunction App() {\n    const Cam = useRef();\n    const Cvs = useRef();\n\n    const POSEFPS = 20;\n\n    // debug\n    const [debug, setDebug] = useState(\"string\");\n\n    // pn model\n    const [model, setModel] = useState();\n    const [pose, setPose] = useState();\n\n    // camera\n    const [deviceId, setDeviceId] = useState(localStorage.getItem(\"CameraId\") || {});\n    const [devices, setDevices] = useState([]);\n    const [wcData, setWCData] = useState(null);\n\n    // sabers\n    const [blueSaber, setBlueSaber] = useState(null);\n    const [redSaber, setRedSaber] = useState(null);\n\n    // attach listeners\n    useEffect(() => {\n        window.addEventListener(\"resize\", ev => {\n            window.location.reload();\n        });\n    }, []);\n\n    /*** Webcam Draw Loop ***/\n    useInterval(async () => {\n        if (\n            !model ||\n            !Cam.current ||\n            !Cam.current?.video ||\n            Cam.current.video.readyState !== 4 ||\n            !model?.estimateSinglePose ||\n            !Cvs.current?.getContext\n        ) {\n            return;\n        }\n        let ps = await model.estimateSinglePose(Cam.current.video, {\n            flipHorizontal: true,\n        });\n        let ctx = Cvs.current.getContext(\"2d\");\n        ctx.fillStyle = \"red\";\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        ps.keypoints\n            .filter(kp => kp.score > 0.1)\n            .filter(kp => kp.part.includes(\"Wrist\") || kp.part.includes(\"Elbow\"))\n            .forEach(kp => {\n                ctx.fillRect(kp.position.x, kp.position.y, 6, 6);\n            });\n\n        // drawing arm\n        const noseX = ps.keypoints.filter(kp => kp.part === \"nose\")[0].position.x;\n\n        setPose(pv => {\n            let kpObj = pv || {};\n            ps.keypoints.forEach(kp => {\n                kpObj[kp.part] = kp.position;\n            });\n            return kpObj;\n        });\n        if (pose) {\n            // parse poses\n            if (pose.leftWrist && pose.leftElbow) {\n                ctx.strokeStyle = \"green\";\n                ctx.lineWidth = 10;\n                ctx.beginPath();\n                ctx.moveTo(pose.leftWrist.x, pose.leftWrist.y);\n                ctx.lineTo(pose.leftElbow.x, pose.leftElbow.y);\n                ctx.stroke();\n                ctx.lineWidth = 0;\n                // wcData.w wcData.\n                if (blueSaber) {\n                    blueSaber.scene.rotation.z = Math.PI / 2;\n                    // = Math.atan(\n                    //     (pose.leftWrist.x - pose.leftElbow.x) /\n                    //         (pose.leftWrist.y - pose.leftElbow.y),\n                    // );\n                    blueSaber.scene.scale.set(0.1, 0.1, 0.1);\n                    blueSaber.scene.position.x =\n                        -2.5 + 5 * (Math.min(pose.leftElbow.x, pose.leftWrist.x) / wcData.w);\n                    // blueSaber.scene.position.x = -2.5;\n                    //blueSaber.scene.position.\n                    var distance = Math.sqrt(\n                        (pose.leftWrist.x - pose.leftElbow.x) ** 2 +\n                            (pose.leftWrist.y - pose.leftElbow.y) ** 2,\n                    );\n                    var prev = 0;\n                    var angle = Math.asin(distance / 120);\n                    //setDebug(distance);\n                    setDebug(angle * 2 * Math.PI);\n                    //blueSaber.scene.rotation.x = angle || prev;\n                    blueSaber.scene.rotation.x = Math.PI / 4;\n                    // console.log(distance);\n                }\n            }\n            if (pose.rightWrist && pose.rightElbow) {\n                ctx.strokeStyle = \"blue\";\n                ctx.lineWidth = 10;\n                ctx.beginPath();\n                ctx.moveTo(pose.rightWrist.x, pose.rightWrist.y);\n                ctx.lineTo(pose.rightElbow.x, pose.rightElbow.y);\n                ctx.stroke();\n                ctx.lineWidth = 0;\n            }\n        }\n    }, 1000 / POSEFPS);\n\n    // webcam switcher\n    const handleDevices = useCallback(\n        mediaDevices => {\n            setDevices(mediaDevices.filter(({ kind }) => kind === \"videoinput\"));\n        },\n        [setDevices],\n    );\n\n    const onWCMedia = useCallback(async mediaStream => {\n        console.log(mediaStream, Cam.current.video);\n        while (\n            !mediaStream.active ||\n            !Cam.current.video ||\n            Cam.current.video.readyState !== 4 ||\n            !Cvs.current\n        )\n            await sleep(50);\n\n        if (mediaStream.active && Cam.current.video) {\n            let v = { w: Cam.current.video.videoWidth, h: Cam.current.video.videoHeight };\n            setWCData(v);\n\n            Cvs.current.height = v.h;\n            Cvs.current.width = v.w;\n            Cam.current.video.height = v.h;\n            Cam.current.video.width = v.w;\n\n            posenetSetup({\n                width: v.w,\n                height: v.h,\n            }).then(model => {\n                setModel(model);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        navigator.mediaDevices.enumerateDevices().then(handleDevices);\n    }, [handleDevices]);\n\n    /** ML MODEL SETUP **/\n    async function posenetSetup({ width, height }) {\n        console.log(\"Loading posenet...\");\n        // const net = await posenet.load({\n        //     architecture: \"MobileNetV1\",\n        //     outputStride: 16,\n        //     inputResolution: { width, height },\n        //\n        //     multiplier: 0.75,\n        // });\n        const net = await posenet.load({\n            architecture: \"ResNet50\",\n            outputStride: 32,\n            inputResolution: { width: 250, height: 200 },\n            quantBytes: 2,\n            multiplier: 1,\n        });\n        // const net = await posenet.load({\n        //     inputResolution: { width: 640, height: 480 },\n        //     scale: 0.8,\n        // });\n        console.log(\"loaded posenet.\");\n        return net;\n    }\n\n    /**\n     *\n     *\n     * THREE JS SETUP\n     *\n     *\n     */\n\n    const [cubes, setCubes] = useState([]);\n    const [renderer, setRenderer] = useState(null);\n    const [scene, setScene] = useState();\n    const [camera, setCamera] = useState();\n\n    useEffect(async () => {\n        setScene(new THREE.Scene());\n    }, []);\n    useEffect(() => {\n        if (!scene) return;\n        scene.background = null;\n\n        setCamera(\n            new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.2, 1000),\n        );\n\n        setRenderer(new THREE.WebGLRenderer({ alpha: true }));\n    }, [scene]);\n    const loader = new GLTFLoader();\n\n    function genCube(lineIndex, lineLayer, type, cutDirection) {\n        function postProcessingCube(gltf) {\n            scene.add(gltf.scene);\n            //gltf.scene.position.z = -50;\n            gltf.scene.position.x = lineIndex - 1.5;\n            gltf.scene.position.y = lineLayer - 1;\n            gltf.scene.scale.set(0.42, 0.42, 0.42);\n            gltf.scene.rotation.x += Math.PI;\n            gltf.scene.rotation.z += Math.PI;\n            setCubes(pv => [...pv, gltf.scene]);\n            switch (cutDirection) {\n                case 0:\n                    gltf.scene.rotation.z += Math.PI;\n                    break;\n                case 1:\n                    break;\n                case 2:\n                    gltf.scene.rotation.z += (3 * Math.PI) / 2;\n                    break;\n                case 3:\n                    gltf.scene.rotation.z += Math.PI / 2;\n                    break;\n                case 4:\n                    gltf.scene.rotation.z += (5 * Math.PI) / 4;\n                    break;\n                case 5:\n                    gltf.scene.rotation.z += Math.PI / 4;\n                    break;\n                case 6:\n                    gltf.scene.rotation.z += (7 * Math.PI) / 4;\n                    break;\n                case 7:\n                    gltf.scene.rotation.z += (5 * Math.PI) / 4;\n            }\n        }\n\n        if (type === 0) loader.load(\"./redbox.glb\", postProcessingCube);\n\n        if (type === 1) loader.load(\"./bluebox.glb\", postProcessingCube);\n    }\n\n    function genSaber({ x, y, z, file, rotX, rotY, rotZ, callback }) {\n        loader.load(file, gltf => {\n            scene.add(gltf.scene);\n            gltf.scene.scale.set(0.42, 0.42, 0.42);\n            gltf.scene.position.x = x;\n            gltf.scene.position.y = y;\n            gltf.scene.position.z = z;\n            gltf.scene.rotation.x = rotX;\n            gltf.scene.rotation.y = rotY;\n            gltf.scene.rotation.z = rotZ;\n            if (callback) callback(gltf);\n        });\n    }\n\n    function breakCube(lineIndex, lineLayer) {\n        for (let i = 0; i < cubes.length; i++) {\n            if (\n                Math.round(cubes[i].position.z) > 5 &&\n                Math.round(cubes[i].position.x + 1.5) === lineIndex &&\n                Math.round(cubes[i].position.y + 1) === lineLayer\n            ) {\n                scene.remove(cubes[i]);\n                setCubes(pv => {\n                    pv.splice(i, 1);\n                    return pv;\n                });\n                return;\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (!renderer || !scene) return;\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.outputEncoding = THREE.sRGBEncoding;\n        document.body.appendChild(renderer.domElement);\n\n        const playingFieldGeo = new THREE.PlaneGeometry(4, 5000, 1);\n        const fieldColor = new THREE.MeshBasicMaterial({\n            color: \"white\",\n            side: THREE.DoubleSide,\n            opacity: 0.5,\n            transparent: true,\n        });\n\n        const playingField = new THREE.Mesh(playingFieldGeo, fieldColor);\n\n        playingField.rotateX(Math.PI / 2);\n        playingField.position.y -= 1.5;\n\n        scene.add(playingField);\n\n        let lights = [];\n        lights[0] = new THREE.PointLight(0xffffff, 5, 0);\n        lights[1] = new THREE.PointLight(0xffffff, 0.1, 0);\n\n        lights[0].position.set(0, 200, 5);\n        lights[1].position.set(0, 0, 200);\n\n        for (let i = 0; i < lights.length; i++) {\n            scene.add(lights[i]);\n        }\n\n        scene.fog = new THREE.Fog(\"black\", 5, 15);\n\n        // const composer = new EffectComposer( renderer );\n\n        document.body.appendChild(stats.dom);\n        // this func is called whenever the resources are available for it\n\n        genCube(0, 0, 0, 4);\n        genCube(1, 1, 1, 5);\n        genCube(2, 2, 0, 6);\n        genCube(3, 2, 1, 7);\n        genSaber({\n            x: 0,\n            y: 0,\n            z: 6,\n            file: \"./redsaber.glb\",\n            rotZ: Math.PI / 2,\n            rotY: 0,\n            rotX: 0,\n            callback: gltf => setBlueSaber(gltf),\n        });\n        setTimeout(() => breakCube(3, 2), 2000);\n\n        camera.position.z = 10;\n    }, [renderer]);\n\n    useInterval(() => {\n        stats.begin();\n        if (!renderer) return;\n        for (let i = 0; i < cubes.length; i++) {\n            cubes[i].position.z += 0.04;\n            if (cubes[i].position.z > 7) {\n                scene.remove(cubes[i]);\n                cubes.splice(i, 1);\n            }\n        }\n\n        renderer.render(scene, camera);\n        // const renderPass = new RenderPass( scene, camera );\n        // composer.addPass( renderPass );\n        // composer.render();\n        stats.end();\n    }, 1000 / 30);\n    return (\n        <>\n            <div>\n                <select\n                    value={deviceId}\n                    onChange={event => {\n                        setDeviceId(event.currentTarget.value);\n                        localStorage.setItem(\"CameraId\", event.currentTarget.value);\n                    }}>\n                    {devices.map((device, key) => (\n                        <option value={device.deviceId} key={device.deviceId}>\n                            {device.label || `Device ${key + 1}`}\n                        </option>\n                    ))}\n                </select>\n                <br />\n                <div\n                    style={{\n                        position: \"relative\",\n                        minHeight: 500,\n                    }}>\n                    <Webcam\n                        ref={Cam}\n                        key={JSON.stringify(wcData)}\n                        audio={false}\n                        mirrored={true}\n                        videoConstraints={{\n                            deviceId: deviceId,\n                            width: { ideal: 250 },\n                            height: { ideal: 200 },\n                        }}\n                        onUserMedia={onWCMedia}\n                        style={{ position: \"absolute\", top: 0, left: 0 }}\n                    />\n                    <pre\n                        style={{\n                            position: \"fixed\",\n                            bottom: 0,\n                            left: 0,\n                            backgroundColor: \"black\",\n                            color: \"white\",\n                            fontSize: 20,\n                        }}>\n                        {debug}\n                    </pre>\n                    <canvas\n                        ref={Cvs}\n                        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 999999 }}\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}