{"version":3,"sources":["utils.js","App.js","reportWebVitals.js","index.js"],"names":["sleep","n","Promise","r","setTimeout","App","Cam","useRef","Cvs","useState","model","setModel","pose","setPose","localStorage","getItem","deviceId","setDeviceId","devices","setDevices","wcData","setWCData","useEffect","window","addEventListener","ev","location","reload","callback","delay","savedCallback","current","id","setInterval","clearInterval","useInterval","a","video","readyState","estimateSinglePose","getContext","flipHorizontal","ps","ctx","x","keypoints","position","y","clearRect","canvas","width","height","fillStyle","filter","kp","score","forEach","fillRect","handleDevices","useCallback","mediaDevices","kind","onWCMedia","mediaStream","console","log","active","v","w","videoWidth","h","videoHeight","posenetSetup","then","posenet","architecture","outputStride","inputResolution","multiplier","net","navigator","enumerateDevices","value","onChange","event","currentTarget","setItem","map","device","key","label","style","minHeight","ref","audio","mirrored","videoConstraints","onUserMedia","top","left","JSON","stringify","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.333d14db.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const sleep = n => new Promise(r => setTimeout(r, n));\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport Webcam from \"react-webcam\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport { sleep, useInterval } from \"./utils\";\n\nfunction App() {\n    const Cam = useRef();\n    const Cvs = useRef();\n\n    const POSEFPS = 20;\n\n    // pn model\n    const [model, setModel] = useState();\n    const [pose, setPose] = useState();\n\n    // camera\n    const [deviceId, setDeviceId] = useState(localStorage.getItem(\"CameraId\") || {});\n    const [devices, setDevices] = useState([]);\n    const [wcData, setWCData] = useState(null);\n\n    // attach listeners\n    useEffect(() => {\n        window.addEventListener(\"resize\", (ev) => {\n            window.location.reload();\n        })\n\n    }, [])\n\n    /*** Draw Loop ***/\n    useInterval(async () => {\n        if (\n            !model ||\n            !Cam.current ||\n            !Cam.current?.video ||\n            Cam.current.video.readyState !== 4 ||\n            !model?.estimateSinglePose ||\n            !Cvs.current?.getContext\n        ) {\n            return;\n        }\n        let ps = await model.estimateSinglePose(Cam.current.video, {\n            flipHorizontal: true,\n        });\n        setPose(ps);\n        let ctx = Cvs.current.getContext(\"2d\");\n        let noseXY = { x: ps.keypoints[0].position.x, y: ps.keypoints[0].position.y };\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n        ctx.fillStyle = \"red\";\n        ps.keypoints\n            .filter(kp => kp.score > 0.1)\n            .forEach(kp => {\n                ctx.fillRect(kp.position.x, kp.position.y, 6, 6);\n            });\n    }, 1000 / POSEFPS);\n\n\n    // webcam switcher\n    const handleDevices = useCallback(\n        mediaDevices => {\n            setDevices(mediaDevices.filter(({ kind }) => kind === \"videoinput\"));\n        },\n        [setDevices],\n    );\n\n    const onWCMedia = useCallback(async mediaStream => {\n        console.log(mediaStream, Cam.current.video);\n        while (\n            !mediaStream.active ||\n            !Cam.current.video ||\n            Cam.current.video.readyState !== 4 ||\n            !Cvs.current\n            )\n            await sleep(50);\n\n        if (mediaStream.active && Cam.current.video) {\n            let v = { w: Cam.current.video.videoWidth, h: Cam.current.video.videoHeight };\n            setWCData(v);\n\n            Cvs.current.height = v.h;\n            Cvs.current.width = v.w;\n            Cam.current.video.height = v.h;\n            Cam.current.video.width = v.w;\n\n            posenetSetup({\n                width: v.w,\n                height: v.h,\n            }).then(model => {\n                setModel(model);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        navigator.mediaDevices.enumerateDevices().then(handleDevices);\n    }, [handleDevices]);\n\n    /** MODEL SETUP **/\n    async function posenetSetup({ width, height }) {\n        console.log(\"Loading posenet...\");\n        const net = await posenet.load({\n            architecture: \"MobileNetV1\",\n            outputStride: 16,\n            inputResolution: { width, height },\n\n            multiplier: 0.75,\n        });\n        // const net = await posenet.load({\n        //     architecture: \"ResNet50\",\n        //     outputStride: 32,\n        //     inputResolution: { width, height },\n        //     quantBytes: 2,\n        // });\n        // const net = await posenet.load({\n        //     inputResolution: { width: 640, height: 480 },\n        //     scale: 0.8,\n        // });\n        console.log(\"loaded posenet.\");\n        return net;\n    }\n\n    return (\n        <>\n            <div>\n                <select\n                    value={deviceId}\n                    onChange={event => {\n                        setDeviceId(event.currentTarget.value);\n                        localStorage.setItem(\"CameraId\", event.currentTarget.value);\n                    }}>\n                    {devices.map((device, key) => (\n                        <option value={device.deviceId} key={device.deviceId}>\n                            {device.label || `Device ${key + 1}`}\n                        </option>\n                    ))}\n                </select>\n                <br />\n                <div\n                    style={{\n                        position: \"relative\",\n                        minHeight: 500,\n                    }}>\n                    <Webcam\n                        ref={Cam}\n                        key={JSON.stringify(wcData)}\n                        audio={false}\n                        mirrored={true}\n                        videoConstraints={{ deviceId: deviceId }}\n                        onUserMedia={onWCMedia}\n                        style={{ position: \"absolute\", top: 0, left: 0 }}\n                    />\n                    <canvas\n                        ref={Cvs}\n                        style={{ position: \"absolute\", top: 0, left: 0, zIndex: 999999 }}\n                    />\n                </div>\n                <br />\n                <pre>\n                    w: {wcData?.w} h: {wcData?.h} <br />\n                    {JSON.stringify(pose, null, 4)}\n                </pre>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}